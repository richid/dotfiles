" ----------------------------------------------------------------------------
"  Vundle configuration (installs automatically)
"  Credit: http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc/
" ----------------------------------------------------------------------------

set nocompatible               " be iMproved
filetype off                   " required!

" Setting up Vundle - the vim plugin bundler
let vundle_installed=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let vundle_installed=0
endif

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle manage Vundle, required
Bundle 'gmarik/vundle'

" Add your bundles here
Bundle 'Lokaltog/vim-powerline'
Bundle 'altercation/vim-colors-solarized'
Bundle 'git://repo.or.cz/vcscommand'
Bundle 'git://github.com/mitechie/pyflakes-pathogen.git'

if vundle_installed == 0
    echo "Installing Bundles, please ignore key map error messages..."
    echo ""
    :BundleInstall
endif

filetype plugin indent on     " required!


" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------

set enc=utf-8              " use utf-8
set autoindent             " automatic indent new lines
set smartindent            " be smart about it
set nowrap                 " do not wrap lines
set tabstop=4		   " 4 spaces
set shiftwidth=4           " ..
set softtabstop=4          " ..
set expandtab              " expand tabs to spaces
set nosmarttab             " fuck tabs
set formatoptions+=n       " support for numbered/bullet lists
set virtualedit=block      " allow virtual edit in visual block ..


" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk


" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set ruler                  " show the cursor position all the time
set number                 " show line numbers
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
set showcmd		   " show incomplete commands
set backspace=start,indent,eol
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%04l,%04v]\ [%p%%]\ [LEN=%L]
set background=dark

highlight Cursor ctermbg=white ctermfg=red
match Cursor /\%#/

colorscheme solarized

" Fancy powerline (statusline) symbols
let g:Powerline_symbols = 'fancy'

" ----------------------------------------------------------------------------
"  Visual Cues
" ----------------------------------------------------------------------------

set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set incsearch              " do incremental searching
set laststatus=2           " always show the status line
set ignorecase             " ignore case when searching
set smartcase		   " smart case-senstive search
set hlsearch               " highlight searches
set visualbell             " shut the fuck up

" Highlight whitespace
match Error /\s\+$/


" ---------------------------------------------------------------------------
"  Misc.
" ---------------------------------------------------------------------------

syntax on
set backupdir=~/.vim/tmp,.
set directory=~/.vim/tmp,.

" Jump to last cursor position when reopening files
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" Strip all trailing whitespace in file
nmap <silent> clw :%s/\s\+$<CR><ESC>

" Execute file being edited with <Shift> + e:
map <buffer> <S-e> :w<CR>:!/usr/bin/env python % <CR>

" Copy the current visual selection to ~/.vbuf
vmap <C-c> :w! ~/.vbuf<CR>

" Copy the current line to the buffer file if no visual selection
nmap <C-c> :.w! ~/.vbuf<CR>

"" Paste the contents of the buffer file
nmap <C-v> :r ~/.vbuf<CR>
